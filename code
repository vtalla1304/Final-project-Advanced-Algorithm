#include <iostream>
#include <sstream>
#include <iomanip>
#include <vector>
#include <cstring>

unsigned int rotateBitsRight(unsigned int value, unsigned int shift) {
    return (value >> shift) | (value << (32 - shift));
}

std::string generateSHA256(const std::string &data) {
    const unsigned int kValues[] = {
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    };

    unsigned int hashValues[] = {
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    };

    std::vector<unsigned char> inputData(data.begin(), data.end());
    unsigned long long bitLength = data.size() * 8;

    inputData.push_back(0x80);
    while ((inputData.size() * 8) % 512 != 448) {
        inputData.push_back(0x00);
    }

    for (int i = 7; i >= 0; --i) {
        inputData.push_back((bitLength >> (i * 8)) & 0xFF);
    }

    for (size_t index = 0; index < inputData.size(); index += 64) {
        unsigned int words[64];
        for (int i = 0; i < 16; ++i) {
            words[i] = (inputData[index + i * 4] << 24) | (inputData[index + i * 4 + 1] << 16) |
                       (inputData[index + i * 4 + 2] << 8) | (inputData[index + i * 4 + 3]);
        }

        for (int i = 16; i < 64; ++i) {
            unsigned int s0 = rotateBitsRight(words[i - 15], 7) ^ rotateBitsRight(words[i - 15], 18) ^ (words[i - 15] >> 3);
            unsigned int s1 = rotateBitsRight(words[i - 2], 17) ^ rotateBitsRight(words[i - 2], 19) ^ (words[i - 2] >> 10);
            words[i] = words[i - 16] + s0 + words[i - 7] + s1;
        }

        unsigned int a = hashValues[0], b = hashValues[1], c = hashValues[2], d = hashValues[3];
        unsigned int e = hashValues[4], f = hashValues[5], g = hashValues[6], h = hashValues[7];

        for (int i = 0; i < 64; ++i) {
            unsigned int S1 = rotateBitsRight(e, 6) ^ rotateBitsRight(e, 11) ^ rotateBitsRight(e, 25);
            unsigned int choice = (e & f) ^ (~e & g);
            unsigned int temp1 = h + S1 + choice + kValues[i] + words[i];
            unsigned int S0 = rotateBitsRight(a, 2) ^ rotateBitsRight(a, 13) ^ rotateBitsRight(a, 22);
            unsigned int majority = (a & b) ^ (a & c) ^ (b & c);
            unsigned int temp2 = S0 + majority;

            h = g;
            g = f;
            f = e;
            e = d + temp1;
            d = c;
            c = b;
            b = a;
            a = temp1 + temp2;
        }

        hashValues[0] += a;
        hashValues[1] += b;
        hashValues[2] += c;
        hashValues[3] += d;
        hashValues[4] += e;
        hashValues[5] += f;
        hashValues[6] += g;
        hashValues[7] += h;
    }

    std::ostringstream finalHash;
    for (int i = 0; i < 8; ++i) {
        finalHash << std::hex << std::setw(8) << std::setfill('0') << hashValues[i];
    }
    return finalHash.str();
}

int main() {
    std::string text = R"(world)";
    std::string hashOutput = generateSHA256(text);
    std::cout << "SHA-256 Hash: " << hashOutput << std::endl;
    return 0;
}
